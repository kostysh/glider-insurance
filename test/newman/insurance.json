{
	"info": {
		"_postman_id": "0a350b38-1d69-4284-aa07-248040c2bbce",
		"name": "Glider Insurance API tests",
		"description": "Automated tests for the Glider Insurance",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Services",
			"item": [
				{
					"name": "Ping GET",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4ca23848-2220-4c7d-bf81-bba79c87f9be",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"const pingResponse = pm.response.json();",
									"",
									"pm.test(\"Proper response\", () => {",
									"    pm.expect(pingResponse.message).to.eq('Pong');",
									"    pm.expect(pingResponse.date).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/service/ping",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"service",
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ping GET with message",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74568d43-c809-4743-978f-9290015fc9dd",
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"const pingResponse = pm.response.json();",
									"",
									"pm.test(\"Proper response\", () => {",
									"    pm.expect(pingResponse.message).to.eq('Pong');",
									"    pm.expect(pingResponse.date).to.match(/\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)/);",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/api/v1/service/ping?message=Ping",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"service",
								"ping"
							],
							"query": [
								{
									"key": "message",
									"value": "Ping"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Ping POST",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"message\": \"Ping\"\n}",
							"options": {
								"raw": {
									"language": "javascript"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/service/ping",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"service",
								"ping"
							]
						}
					},
					"response": []
				},
				{
					"name": "Ping POST wrong request",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2ea73f71-e59c-4bb5-b714-356dad69c653",
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"    pm.response.to.have.status(400);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"const pingResponse = pm.response.json();",
									"",
									"pm.test(\"Proper error message\", () => {",
									"    pm.expect(pingResponse.message).to.eq('Request validation error: data should have required property \\'message\\'');",
									"    pm.expect(pingResponse.code).to.eq('BAD_REQUEST')",
									"});",
									"",
									"// Stop execution if there is an error",
									"if (pm.response.status !== \"OK\") {",
									"    postman.setNextRequest(null);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"unknown\": \"Ping\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{API_URL}}/api/v1/service/ping",
							"host": [
								"{{API_URL}}"
							],
							"path": [
								"api",
								"v1",
								"service",
								"ping"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cb207f4c-2ce3-4142-a427-ea9570efd64a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "adc425d0-1a33-4b2d-a85d-ddad07a5751f",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "2429d966-22ae-46f3-af3a-83455e475287",
			"key": "API_URL",
			"value": "http://localhost:3000"
		}
	],
	"protocolProfileBehavior": {}
}